"""Generic training algorithms for GANs.  This is abstracted out here so allow
for the same training routines to compare classical and quantum GANs.
"""
from jax.random import PRNGKeyArray
import jax.numpy as jnp
from jaxtyping import Array, Float
from optax import GradientTransformation
import equinox as eqx
from typing import NamedTuple
from abc import abstractmethod, ABCMeta


def bce_loss(x: Float[Array, "batch"], target: float):
    """Compute the binary cross entropy between x and the target probabilities.

       Args:
         x: Array of input probabilities (entire batch)
         target: Target probability (label)

       Returns:
    cross entropy loss (float).
    """
    return -jnp.mean(
        target * jnp.clip(jnp.log(x), a_min=-100)
        + (1 - target) * jnp.clip(jnp.log(1 - x), a_min=-100)
    )


class GAN(eqx.Module, metaclass=ABCMeta):
    """A generic generative adversarial network.  We provide these methods
    because the intermediate state of a quantum batch GAN cannot be used
    separately while training with generated data.
    """

    @abstractmethod
    def random_latent(key: PRNGKeyArray) -> Float[Array, "latent"]:
        """Generate a random latent space vector.

        Args:
          key: A JAX PRNG key (determinism).

        Returns:
          A random vector in the latent space of the GAN.
        """
        raise NotImplementedError

    @abstractmethod
    def train_fake(latent: Float[Array, "latent"]) -> float:
        """Generate an image from the given latent space vector, feed it to the
        discriminator, and compute a probability that the discriminator thinks
        the data is real (0.0 -> fake, 1.0 -> real).

        Args:
          latent: A vector in the GAN latent space (generated by
            random_latent).

        Returns:
          A probability from 0 to 1.
        """
        raise NotImplementedError

    @abstractmethod
    def train_real(features: Float[Array, "feature"]) -> float:
        """Compute a probability that the discriminator thinks a training
        example is real (0.0 -> fake, 1.0 -> real).

        Args:
          features: A feature vector draw from the training set.

        Returns:
          A probability from 0 to 1.
        """
        raise NotImplementedError


def train_gan(
    gen_optimizer: GradientTransformation,
    init_gen_params,
    dis_optimizer: GradientTransformation,
    init_dis_params: GAN,
    checkpoint_freq: int = 50,
):
    checkpoints = []
    g_loss_history = []
    d_loss_history = []
